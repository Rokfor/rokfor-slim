{
  "name": "Rokfor-slim",
  "tagline": "Rokfor CMS: Api First CMS without any opinions towards content rendering",
  "body": "rokfor-slim\r\n===========\r\n\r\nRokfor build based on [Slim Framework](<http://slimframework.com/>) for PHP. \r\nRokfor is a api-first, data centristic content management. It currently\r\nfeatures:\r\n\r\n-   Flexible structures called \"Books\", divided into parts, called \"Chapters\".\r\n-   Every book can have multiple instances called \"Issues\".\r\n-   Every Chapter contains data, called \"Contributions\".\r\n-   \"Contributions\" are collections of fields, gathered in templates.\r\n-   Various data types supported: Text, Text Arrays, RTF Text, Tables, Numbers,\r\n    Dates, Locations, Image and File uploads, Tags, Selectors, Sliders, Two Way\r\n    Sliders.\r\n-   Various data relations: field to fields, field to structures, fixed values\r\n    and many more.\r\n-   Read only api with a simple bearer-key authentification based on user\r\n    rights.\r\n-   Fine grained roles and rights system.\r\n-   Installable via composer, using grunt and bower as build system.\r\n\r\n![Dashboard](<https://github.com/Rokfor/rokfor-slim/blob/gh-pages/rokfor-screenshots/rf-dashboard.png>)\r\n\r\nRokfor has already a longer history. The [old build](<https://github.com/Rokfor/rokfor-cms>) \r\nwas mainly used to create printed matter. In order to make it more useful for the public, we \r\ndecided to rewrite it completely applying a modern way of writing php applications:\r\n\r\n-   Composer install system\r\n-   AdminLTE backend theme\r\n-   Propel ORM\r\n\r\nSetup and Installation\r\n----------------------\r\n\r\n### 1. Prerequisites\r\n-   MySQL Database: Server, username, password and database name\r\n-   PHP \\>= 5.5\r\n-   [Composer](<https://getcomposer.org>)\r\n\r\n### 2. Install Dependencies\r\nClone the repository and install the dependencies with composer:\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n$ git clone https://github.com/Rokfor/rokfor-slim.git\r\n$ cd rokfor-slim\r\n$ composer install\r\n$ composer update\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n### 3. Configuration\r\nFirst, create copies of the database and settings configuration file. Rename or\r\ncopy the *.local.php to *.php files:\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n$ cd config\r\n$ cp database.local.php database.php\r\n$ cp settings.local.php settings.php\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe options in the **settings.php** file don't need to be changed as long as you keep\r\nthe directory structure. Talking about **directories**: Make sure, that the webserver \r\nhas access to the _udb_ and _cache_ folder:\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\npublic         _Webserver Document Root_\r\n| index.php    \r\n| udb          _Default Storage directory, chmod r/w for the webserver_\r\n| assets\r\nconfig         _Configuration Files_\r\nlocale         _Localization Files, currently only german_\r\ncache          _Template Cache_\r\nsrc            _Rokfor PHP Runtime Sources_\r\nvendor         _Composer Dependencies_\r\ntemplates      _Jade Templates_\r\nbuild          _Css and Javascript Sources_\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nSecond, you need to change the database settings in **database.php**. To achieve that,\r\nyou need to know the User, Password, Database and Server for your MySQL Account.\r\nIf you enable **versioning** in the configuration file, all changes of contributions\r\nare tracked. This is useful in cases you want to keep the editing history. As a downside,\r\nit will create a lot of data.\r\nIf you change the log **level** to \\\\Monolog\\\\Logger::DEBUG, all sql queries are\r\nlogged. The path to the log file can be adjusted in the **log** setting.\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n// Database settings\r\n\r\nreturn [\r\n  'host'      => 'localhost',                     // Server Address\r\n  'user'      => '',                              // User Name\r\n  'pass'      => '',                              // Password\r\n  'dbname'    => '',                              // Database Name\r\n  'log'       => __DIR__ . '/../logs/propel.log', // Log File for Propel\r\n  'level'     => \\Monolog\\Logger::ERROR,          // Error Level\r\n  'versioning'=> false,                           // Store Versions of  \r\n                                                  // Contributions and Data\r\n  //'socket'  => '/tmp/mysql.sock',               // Unix Socket, normally\r\n                                                  // not needed\r\n  //'port'    => 3306,                            // Port, if default not needed\r\n];\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n### 4. Populate Database\r\n\r\n**Normally, the database is initialized when you log in for the first time. If no\r\nerror occured, you can skip this chapter.**\r\n\r\nRokfor relies on [Propel](<http://propelorg.org>) as database object mapper.\r\nPropel is loaded via composer and installed like all other dependencies in the\r\nvendor subdirectory. The connection between rokfor and Propel is established with\r\n[rokfor-php-db](<https://github.com/rokfor/rokfor-php-db>).\r\n\r\nYou need to run the **Propel CLI** tool to populate the database. Propel needs to\r\nknow how to access your database. This is done in the configuration file.\r\nEdit the connection settings in the **propel.yaml** file similar to the\r\nconfiguration file above. Change server, database, user and password and save\r\nthe file:\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n$ pico vendor/rokfor/db/config/propel.yaml\r\n\r\ndsn: mysql:host=SERVER;dbname=DBNAME;unix_socket=/tmp/mysql.sock;\r\nuser: USERNAME\r\npassword: PASSWORD\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nNow you are ready to run the **Propel CLI** utility with the **insert** parameter. \r\nThe command below assumes that you are still in the directory where you checked out\r\nrokfor-slim:\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n$ ./vendor/bin/propel sql:insert \\\r\n--config-dir ./vendor/rokfor/db/config \\\r\n--sql-dir ./vendor/rokfor/db/config/generated-sql/\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nNow, the database should be populated with the correct strucuture and a default\r\nuser is automatically added (Username: root, Password: 123).\r\n\r\nRunning Rokfor\r\n--------------\r\n\r\n### PHP Server Mode (Debug)\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n$ cd rokfor-slim (base directory of the repository)\r\n$ php -S 0.0.0.0:8080 -t public public/index.php\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nNow you should be able to browse to **http://localhost:8080/rf** and log in with\r\nthe default user **root** and password **123**.\r\n\r\n### Behind Apache\r\nThere are 3 important things to keep in mind when running Rokfor with Apache:\r\n1. Make sure that the webserver has read/write access to both **cache** und **udb** directory\r\n2. The server's document_root needs to point to the **public** directory. If you can not change this,\r\nrename the directory according to your server configuration and reconfigure the settings.php file.\r\n3. **mod\\_rewrite** is also necessary to redirect all traffic over **index.html**.\r\n\r\nBuilding Rokfor\r\n---------------\r\n\r\nRokfor uses grunt to build and bower to install dependencies. Assuming you have\r\ninstalled node and npm:\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n$ npm install\r\n$ bower install\r\n$ grunt\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe grunt task minifies the css files and creates the javascript bundles and copies\r\nall files into the public directory. Building is only needed if you want to develop\r\nand contribute something to Rokfor.\r\n\r\nGet some Data: Read Only API\r\n----------------------------\r\n\r\n### Access Key\r\nIn order to access data, you need to set a user and define a read only api key\r\nin the user profile. Adding a user is only possible if you are signed in as\r\nroot. There are two reasons why we use api keys for read only access. First, you\r\ncan define which data is published, second, a key is not a password. Even by\r\npublishing a key, there's no way to log into the system and edit content.\r\n\r\nSending the key is done via a bearer authentification header or a access\\_token\r\nquery string. Sending a header is probably a better solution since the query\r\nstring won't be too cluttered and the api key probably does not show up in the\r\nserver log. The GET-call is probably a little bit more difficult to generate\r\nthough.\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nGET /api/contributions/1/1?access_token=[key]\r\n\r\n$ curl -H \"Authorization: Bearer [key]\" http://localhost:8080/api/contributions/1/1\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n### Current API Routes\r\n**Loading a collection of contributions with options:**\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nGET /api/contributions/:issueid|:issueid-:issueid.../:chapterid|:chapterid-:chapterid...?[options]\r\n\r\nOptions:\r\n\r\n- query=string                                                (default: empty)\r\n- filter=[id|date|sort|templateid[s]]:[lt[e]|gt[e]|eq|like]   (default: [omitted]:like)\r\n- sort=[[id|date|name|sort]|chapter|issue|templateid[s]]:[asc|desc]           (default: sort:asc)\r\n- limit=int                                                   (default: empty)\r\n- offset=int                                                  (default: empty)\r\n- data=[Fieldname|Fieldname|XX]                               (default: empty)\r\n- populate=true|false                                         (default: false)\r\n- verbose=true|false                                          (default: false)\r\n- template=id                                                 (default: empty)\r\n- status=draft|published|both                                 (default: published)\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n-   Query: search for a string within the contribution name or the text fields\r\n    Special queries: date:now is transformed into the current time stamp\r\n-   Filter: Applies the search string passed in query to certain fields, to the creation\r\n    date, the contribution id or sort number.\r\n    By default (if fields are omitted) the search query is applied to the name of the \r\n    contribution and its content fields (full text search).\r\n    Furthermore, the comparison can be defined with equal, less than, greater than\r\n    or like (eq,lt,lte,gt,gte,like). Less and greater than does automatically cast\r\n    a string to a number.\r\n-   Sort: Sort the results by id, date, name or manual sort number (sort) either \r\n    ascending or descending. It is also possible to sort by a custom id of a template field.\r\n    Contributions can also be sorted by chapter or issue.\r\n    Please note: You need to choose between id, date, name and sort. You can add one\r\n    custom sort field and the chapter and issue flag. i.E:\r\n    sort=date|chapter|issue|23 would sort by date, chapter, issue and the custom field 23.\r\n-   Limit and Offset: Create pages with a length of [limit] elements starting at\r\n    [offset].\r\n-   Data: Add additional field infos to the result set of a contributions.\r\n    For example, you need the title field of a contribution already in the\r\n    result set to create a multilingual menu. Or you need all images for a\r\n    slideshow over multiple contributions.\r\n-   Populate: Sends all data (true). Equals data=All|Available|Fields\r\n-   Verbose: Send complete Information about a dataset. In most cases, this \r\n    is too much and just slowing down the connection.\r\n-   Template: limit to a certain template id\r\n-   Status: Including draft contributions, published contributions or both. Open\r\n    Contributions are never shown.\r\n\r\nExamples:\r\n\r\nGET /api/contributions/1/14-5?query=New+York\r\n\r\n    Searches for all contributions within issue 1 and chapters 14 and 5 for the String \"New York\".\r\n\r\nGET /api/contributions/1/14-5?query=New+York&filter=1|6:eq\r\n\r\n    Searches for all contributions within issue 1 and chapters 14 and 5 for the exact String \"New York\" within both fields with the template id 1 and 6.\r\n\r\nGET /api/contributions/1/14-5?query=12&filter=sort:gtlimit=1\r\n\r\n    Searches for all contributions within issue 1 and chapters 14 and 5 with a sort value > 12 and a limitation to 1 item. This represents the next contribution in a manually sorted list, since the list is has a default sort order by 'sort, asc'.\r\n\r\nGET /api/contributions/1/14-5?query=12&filter=sort:lt&sort=sort:desc&limit=1\r\n\r\n    Searches for all contributions within issue 1 and chapters 14 and 5 with a sort value < 12 and a limitation to 1 item, order descending. This represents the previous contribution in a manually sorted list.\r\n\r\nGET /api/contributions/12/19?limit=10&offset=20\r\n\r\n    Returns 10 contributions of issue 12 and chapter 19 starting after contribution 20.\r\n\r\nGET /api/contributions/5-6-7/1-2-3?sort=date:desc&data=Title|Subtitle\r\n\r\n    Returns all contributions of issue 5, 6 and 7 and chapter 1, 2 and 3 ordered by date, descending. Additionally, populates each contribution entry with the content of the fields Title and Subtitle.\r\n\r\nGET /api/contributions/1/1?populate=true&verbose=true\r\n\r\n    Returns all contributions of chapter 1 and issue 1. Adds all fields to each contribution and additionally prints a lot of information to each field and contribution.\r\n\r\nGET /api/contributions/1/1?template=12\r\n\r\n    Returns all contributions of chapter 1 and issue 1 based on the template 12\r\n\r\n**Loading a single contribution:**\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nGET /api/contribution/:id?[options]\r\n\r\nOptions:\r\n\r\n- verbose=true|false                   (default: false)\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n-   Verbose: Send complete Information about a dataset. In most cases, this \r\n    is too much and just slowing down the connection.\r\n\r\nExamples:\r\n\r\nGET /api/contributions/12?verbose=true\r\n\r\n    Loads all available data from contribution with the id 12\r\n\r\n**Structural Queries**\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nGET /api/books|issues|chapters/[:id]?[options]\r\n\r\nOptions:\r\n\r\n- data=[Fieldname|Fieldname|XX]        (default: empty)\r\n- populate=true|false                  (default: false)\r\n- verbose=true|false                   (default: false)\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n-   Data: Add additional field infos to the result set of a contributions.\r\n    For example, you need the title field of a contribution already in the\r\n    result set to create a multilingual menu. Or you need all images for a\r\n    slideshow over multiple contributions.\r\n-   Populate: Sends all data (true). Equals data=All|Available|Fields\r\n-   Verbose: Send complete Information about a dataset. In most cases, this \r\n    is too much and just slowing down the connection.\r\n\r\nExamples:\r\n\r\nGET /api/books\r\n\r\n    Shows all books available for the current api key\r\n\r\nGET /api/chapters/3\r\n\r\n    Shows all information about chapter 3\r\n\r\nGET /api/issue/2?verbose=true&populate=true\r\n\r\n    Shows all information about issue 2. Additionally, raises the verbosity level and populates all data fields if a issue has backreferences to contributions.\r\n\r\nRoadmap\r\n-------\r\n\r\nIn the current state, Rokfor is able to store and organize data. On the roadmap\r\nthere are additional functions which will be implemented:\r\n\r\n- Read / write api with jwt authentification.  \r\n- Batch functions: Run custom actions over all contributions of a certain chapter.\r\n- Field processors: Run an action when storing data.  \r\n- Exporters: Convert data into other formats (i.e. PDF)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}