FORMAT: 1A
HOST: https://demo.rokfor.ch

# Rokfor API
Rokfor is a *api-first*, *decoupled*, *headless* CMS serving a JSON
api. Meaning: Rokfor is serving files and data structures only via 
a programmable, restful API. 

Rokfor is open source, installable with composer and built with 
PHP, Slim Framework and other Libraries. It runs well on Amazon 
EC2 and has the ability to use S3 as its storage backend.

Rokfor is still in early stage, the API might change and will be
extended for sure.

# Group Contribution 

Contributions are the main elements containing data. 
They are defined by templates, so the returned json data is
higly dependant on what kind of template is used.
Only contributions with the status "draft" or "published" are exposed
by the API.

## Single Contribution [/api/contribution/{contribution}]

Basic __CRUD__ Functions: Create, read, update and delete a single
contribution. Binary Uploads are currently unsupported. We're looking
for the best way to do it.

Contributions are only available with the status _Draft_ or _Published_.
There is no way to export a unpublished contribution, unless you change 
the state by issuing a `POST` command.

+ Parameters

    + contribution: 1 (number) - Id of the contribution.

### Create Contribution [PUT /api/contribution]

+ Request (application/json)

    + Headers

            Authorization: Bearer READ_WRITE_JWT_TOKEN_HERE
    
    + Attributes

        + Template: 1
            Id of the template
        + Name: Name of the contribution
            Title of the contribution
        + Chapter: 1
            Id of the chapter
        + Issue: 1
            Id of the issue
        + Status: Draft
            Status can be "Draft", "Open", "Published" or "Deleted".

    + Schema

            {
                "type": "object",
                "properties": {
                    "Template": {
                        "type": "integer"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "Chapter": {
                        "type": "integer"
                    },
                    "Issue": {
                        "type": "integer"
                    },
                    "Status": {
                        "type": "string"
                    }
                }
            }

+ Response 200 (application/json)

    + Body

            {
                "Id": 3
            }
    
    + Schema

            {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "integer"
                    }
                }
            }

+ Response 500 (application/json)

    + Body

            {
                "Error": "Template Id missing or not an integer value."
            }
    
    + Schema
    
            {
                "type": "object",
                "properties": {
                    "Error": {
                        "enum": [ 
                            "Template Id missing or not an integer value",
                            "Chapter Id missing or not an integer value.",
                            "Issue Id missing or not an integer value.",
                            "Contribution Name missing or not a string.",
                            "Contribution Name missing or not a string."
                            "Issue does not exist or user has no access.",,
                            "Chapter does not exist or user has no access.",
                            "Issue and chapter are not in the same book.",
                            "Template id not valid or not allowed within this chapter or issue.",
                            "Error creating contribution.",
                            "Body is not a valid json string.",
                            "Wrong key supplied"
                        ]
                    }
                }
            }

### Read Contribution [GET /api/contribution/{contribution}{?verbose}]

+ Parameters

    + contribution: 18 (number) - Id of the contribution.
    + verbose: false (boolean, optional) - Higher verbosity level.

+ Request (application/json)

    + Headers

            Authorization: Bearer b309376e96d5f364c72bb677bf0c1266
 
+ Response 200 (application/json)

    + Body

            {
              "Contribution": {
                "Id": 1,
                "Name": "Was gehts",
                "Forissue": 1,
                "Forchapter": 1,
                "Fortemplate": 1,
                "Forbook": 1,
                "ForissueName": "Issue 1",
                "ForchapterName": "Chapter 1",
                "FortemplateName": "Demo",
                "ForbookName": "Book",
                "Sort": 0,
                "ReferencedFrom": []
              },
              "Data": {
                "Upload": {
                  "Id": 1,
                  "Content": [
                    {
                      "Files": {
                        "Thumbnail": "/asset/1/1/Out_of_Time_DE.png-thmb.jpg",
                        "Original": "/asset/1/1/Out_of_Time_DE.png",
                        "Resized": [
                          "/asset/1/1/Out_of_Time_DE.png-preview0.jpg"
                        ]
                      },
                      "Captions": "Caption",
                      "Parsed": "Caption"
                    }
                  ]
                },
                "Text": {
                  "Id": 2,
                  "Content": "This is a _markdown_ text.",
                  "Parsed": "<p>This is a <em>markdown</em> text.</p>"
                },
                "Table": {
                  "Id": 3,
                  "Content": [
                    [
                      "Miller",
                      "Henry",
                      "Street",
                      "Location"
                    ]
                  ]
                },
                "Matrix": {
                  "Id": 4,
                  "Content": [
                    45.454545454545,
                    40.816326530612
                  ]
                },
                "Slider": {
                  "Id": 5,
                  "Content": null
                },
                "Location": {
                  "Id": 6,
                  "Content": [
                    47.354021140816,
                    8.5201042890553
                  ]
                },
                "Number": {
                  "Id": 7,
                  "Content": null
                },
                "Select": {
                  "Id": 8,
                  "Content": "1",
                  "Reference": {
                    "1": {
                      "Id": 1,
                      "Name": "Book",
                      "ReferencedFrom": [
            
                      ],
                      "Localization": [
            
                      ],
                      "Options": [
            
                      ],
                      "Type": null,
                      "Parent": null
                    }
                  },
                  "ReferenceType": "Books"
                },
                "Keywords": {
                  "Id": 9,
                  "Content": [
                    "Keyword 1",
                    "Keywords 2"
                  ],
                  "Reference": {
                    "Keyword 1": "Keyword 1",
                    "Keywords 2": "Keywords 2"
                  },
                  "ReferenceType": "Self"
                }
              },
              "QueryTime": 0.010781049728394,
              "Hash": "40cd750bba9870f18aada2478b24840a"
            }
        
    + Schema
    
                {
                    "type": "object",
                    "properties": {
                        "Contribution": {
                            "type": "object",
                            "properties": {
                                "Id": {"type": "integer"},
                                "Name": {"type": "string"},
                                "Forissue": {"type": "integer"},
                                "Forchapter": {"type": "integer"},
                                "Fortemplate": {"type": "integer"},
                                "Forbook": {"type": "integer"},
                                "ForissueName": {"type": "string"},
                                "ForchapterName": {"type": "string"},
                                "FortemplateName": {"type": "string"},
                                "ForbookName": {"type": "string"},
                                "Sort": {"type": "integer"},
                                "ReferencedFrom": {"type": "array"}
                            }
                        },
                        "Data": {"type": "object"},
                        "QueryTime": {"type": "number"},
                        "Hash": {"type": "string"}
                    }
                }     

+ Request Error (application/json)

    + Parameters

        + contribution: 0 (number) - Id of the contribution.


+ Response 500 (application/json)

    + Body

            {
                "Error": "Element not found"
            }

    + Schema
    
            {
                "type": "object",
                "properties": {
                    "Error": {
                        "enum": [ 
                            "Element not found",
                            "No access to Element",
                            "Wrong key supplied"
                            ]
                    }
                }
            }

### Update Contribution [POST /api/contribution/{contribution}]

+ Parameters

    + contribution: 1 (number) - Id of the contribution.

+ Request (application/json)

    + Headers

            Authorization: Bearer READ_WRITE_JWT_TOKEN_HERE

    + Attributes

        + Template: 1
            Id of the template
        + Name: Name of the contribution
            Title of the contribution
        + Chapter: 1
            Id of the chapter
        + Issue: 1
            Id of the issue
        + Status: Draft
            Status can be "Draft", "Open", "Published" or "Deleted".
        + Data (array)
            + (object)
                + Field 1: Value
                Value depends on the field type. It is mostly a json 
                encoded string. Text fields accept also a string, number
                fields integers.
                Field name refers to the name of the field within the 
                template. The post call will fail if the field name does
                not exist in the template.
            + (object)
                + Field 2: Value 
            + (object)
                + Field …: Value 

    + Schema

            {
                "type": "object",
                "properties": {
                    "Template": {
                        "type": "integer"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "Chapter": {
                        "type": "integer"
                    },
                    "Issue": {
                        "type": "integer"
                    },
                    "Status": {
                        "type": "string"
                    }
                    "Data": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            }

+ Response 200 (application/json)

    + Body

            {
                "Id": 3
            }

    + Schema

            {
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "integer"
                    }
                }
            }
    
+ Response 500 (application/json)

    + Body

            {
                "Error": "Template Id missing or not an integer value."
            }

    + Schema
    
            {
                "type": "object",
                "properties": {
                    "Error": {
                        "enum": [ 
                            "Template Id missing or not an integer value",
                            "Chapter Id missing or not an integer value.",
                            "Issue Id missing or not an integer value.",
                            "Contribution Name missing or not a string.",
                            "Contribution Name missing or not a string."
                            "Issue does not exist or user has no access.",,
                            "Chapter does not exist or user has no access.",
                            "Issue and chapter are not in the same book.",
                            "Template id not valid or not allowed within this chapter or issue.",
                            "Error creating contribution.",
                            "Body is not a valid json string.",
                            "Wrong key supplied",
                            "Field [fieldname] does not exist in this template.",
                            "Name must not be an empty string. Omit Name completely if it should be ignored."
                        ]
                    }
                }
            }
    
### Delete Contribution [DELETE /api/contribution/{contribution}]

+ Parameters

    + contribution: 1 (number) - Id of the contribution.
    
+ Request (application/json)

    + Headers

            Authorization: Bearer READ_WRITE_ACCESS_TOKEN_HERE
 
+ Response 200 (application/json)

        {
            "Id": 1
        }

+ Response 500 (application/json)

    + Body

            {
                "Error: "Contribution id does not exist."
            }

    + Schema
        
            {
                "type": "object",
                "properties": {
                "Error": {
                    "enum": [        
                        "Contribution id does not exist.",
                        "No access for this contribution."]
                    }
                }
            }

## Selection of Contributions [/contributions/{issue}/{chapter}{?query}{?sort}{?limit}{?offset}{?filter}{?data}{?populate}{?verbose}{?template}{?status}]

A selection of contributions is similar to a SQL "select" command. There are various options
to filter, sort and paginate the selection. It is also possible to "populate" the selection call
with contribution data by setting `populate` to true or defining a selection of fields with
`data=Fieldname 1|...|...`. 

**Please Note:** Selections support only `GET` calls (Read only).

+ Parameters

    + issue: `1-2-4` or 1 (string) - Id(s) of the issue(s). Multiple values are
    separated with `-`
    + chapter: `15-22` or 12 (string) - Id(s) of the chapter(s). Multiple values are
    separated with `-`
    + query: Test (string, optional) - String to search for
        + Default: empty
    + filter: 7|9|12:eq  (string, optional) - Fields to search in, or 
    specific metadata. 
    If omitted, the search will be executed in all fields. 
    Possible values are [id|date|sort|templateid[s]]:[lt[e]|gt[e]|eq|like]
        + Default: [omitted]:like
    + sort: date|chapter:desc (string, optional) - Sort options for 
    the result set. 
    Possible values are [[id|date|name|sort]|chapter|issue|templateid[s]]:[asc|desc]
        + Default: sort:asc
    + limit: 7 (integer, optional) - Limit of returned results
        + Default: empty
    + offset: 10 (integer, optional) - Offset of the result set 
    (for pagination)
        + Default: empty
    + data: Title|Subtitle (string, optional) - Selection of 
    field [Fieldname X|Fieldname Y|Fieldname Z]
        + Default: empty
    + populate: true (boolean, optional) - Show all fields
        + Default: false
    + template: 12 (integer, optional) - Filter by template id
        + Default: omitted
    + status: both (string, optional) - draft, published or both 
        + Default: published
    + verbose: true (boolean, optional) - Higher verbosity level.
        + Default: false

### Read Contributions [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer b309376e96d5f364c72bb677bf0c1266
 
+ Response 200 (application/json)

            {
              "Documents": [
                {
                  "Contribution": {
                    "Id": 682,
                    "Name": "Contribution Title",
                    "Forissue": 1,
                    "Forchapter": 1,
                    "Fortemplate": 1,
                    "Forbook": 1,
                    "ForissueName": "Issue Title",
                    "ForchapterName": "Chapter Title",
                    "FortemplateName": "Template Name",
                    "ForbookName": "Book Name",
                    "Sort": 2,
                    "ReferencedFrom": []
                  },
                  "Data": {
                    "Synopsis": {
                      "Id": 5223,
                      "Content": [
                        "Text content of the field named \"Synopsis\"",
                        "Content contains the raw\n text string.",
                        "Parsed contains a _html_ string.",
                        "If the field is configured as markdown."
                      ],
                      "Parsed": [
                        "Text content of the field named \"Synopsis\"",
                        "Content contains the raw<br> text string.",
                        "Parsed contains a <i>html</i> string.",
                        "If the field is configured as markdown."
                      ]
                    }
                  }
                }
              ],
              "NumFound": 2,
              "Limit": 1,
              "Offset": null,
              "QueryTime": 0.090133905410767,
              "Hash": "85a46d1aa1170c98cf14f24cee579eec"
            }
            
+ Response 500 (application/json)

    + Body

            {"Error": "Wrong key supplied"}

    + Schema
        
            {
                "type": "object",
                "properties": {
                "Error": {
                    "enum": [        
                        "Wrong key supplied.",
                        "Access denied to the selected issues and chapters."
                        ]
                    }
                }
            }        

# Group Login

## Read Only Access

There is no login action required to access read only functions. Read only keys are
generated in the Rokfor backend in the `Profile` section. A user is only allowed 
to expose the data he has access to.
The read only key needs to be passed as a `Authorization: Bearer KEY` header.

## Read Write Access [/api/login]

Read write access requires a login first to obtain a valid read write token. Tokens
are based on the [JWT](http://jwt.io) standard. The JWT token returned after a successful
login will be used as the `Authorization: Bearer READ_WRITE_JWT_TOKEN_HERE` header
for read write actions.

### Login [POST]

+ Request (application/x-www-form-urlencoded)

    + Body
        
            username=test&apikey=358e6316fcd7d76f415c4fcdc0e1caef

    + Attributes
    
        + username: test (string) - Login name of the user
        + apikey: 358e6316fcd7d76f415c4fcdc0e1caef (string) - Read write api key

+ Response 200 (application/json)

    + Body
    
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImp0aSI6InJmNTdjZmRhODdlYjMwNzYuNjU4MjA4NTAifQ.
            eyJpc3MiOiJleGFtcGxlLmNvbSIsImF1ZCI6ImV4YW1wbGUuY29tIiwianRpIjoicmY1N2NmZGE4N2ViMzA3
            Ni42NTgyMDg1MCIsImlhdCI6MTQ3MzIzOTY4NywibmJmIjoxNDczMjM5Njg3LCJleHAiOjE0NzMyNDMyODcs
            InVpZCI6MX0.tS9c-GigZZUdcL4wzIR_6SmTFAjl9rsuRW2ADY5xNx4"
            
+ Response 500 (application/json)

    + Body
    
            {
                "Error": "Wrong key supplied"
            }


# Group File

## Private Files [/api/proxy/{contribution}/{file}]
Downloading a file from a *non public* template. This function is 
normally not called directly. It is sent within a contribution
response as an url for a upload/binary field.

+ Parameters

    + contribution: 1 (number) - Id of the contribution.
    + file: aHR0cHM6Ly9zMy5ldS1jZW50cmFsLTEuYW1hem9uYXdzLmNvbS9yb2tmb3IvNjFkNjNmMjAzMDY0ODRhOTU0ZDBiZDE5NDY0YjIxMjMvYmFja2VuZC0xLnBuZw== (string) - base64 encoded string of the original file.

### Retrieve a private file [GET]

+ Request

    + Headers

            Authorization: Bearer READ_ONLY_ACCESS_TOKEN_HERE

+ Response 200 (image/jpeg)
The content is depending on the stored resource.

    + Body

            SOME_BINARY_DATA

+ Response 404 (application/json)
    
    + Body
    
            {"Error": "File not found"}

+ Response 500 (application/json)

    + Body

            {"Error": "Element not found"}
    
    + Schema
    
            {
                "type": "object",
                "properties": {
                "Error": {
                    "enum": [        
                        "Element not found",
                        "No access to Element",
                        "Base64 encoding failed",
                        "Wrong key supplied",
                        "Unknown Error"]
                    }
                }
            }

## Public Files [/asset/{contribution}/{field}/{file}]
Downloading a file from a *public* template. This function
is callable without any credentials and serves as a static
url.

+ Parameters

    + contribution: 1 (number) - Id of the contribution.
    + field: 1 (number) - Id of the field.
    + file: picture.jpg (string) - Name of the file.

### Retrieve a public file [GET]

+ Response 200 (image/jpeg)
The content is depending on the stored resource.

    + Body

            SOME_BINARY_DATA

+ Response 404 (text/plain)
    
    + Body
    
            {"Error": "File not found"}